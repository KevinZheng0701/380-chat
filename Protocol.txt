Secure Chat System Protocol:

Authentication Handshake (Diffie-Hellman):

To establish a secure handshake at the beginning of each session, we employ the Diffie-Hellman key exchange with ephemeral keys, complemented by unique session tokens and hashing procedures.
Here's a breakdown of the key exchange process:
    1. Both parties agree on the necessary keys for the exchange, including a large prime p and a generator g required for the Diffie-Hellman exchange.
    2. The client generates a secret integer a and computes the public key g^a, which is sent to the server.
    3. The server generates a secret integer b and computes g^b, which is then sent to the client.
    4. The server also generates a unique session token and computes the hash of the secret key g^ab concatenated with the session token, which is sent to the client.
    5. Upon receiving g^b, the client computes the shared secret key and generates its own session token independently.
    6. The client computes the hash of the shared secret g^ab along with its session token and sends it to the server.
    7. Both parties use the session keys to ensure the Diffie-Hellman key exchange is authenticated.
    8. After authentication, RSA keys are generated for message encryption and decryption.
    9. Clean up all traces of exchanges in the chat system.

Message Encryption(RSA with HMAC):

The process for encrypting messages involves the following steps:
    1. A pseudo-random key is generated and encrypted using RSA to be used as the shared key for symmetric encryption.
    2. The encrypted shared key is sent to the other party.
    3. Encrypt the message using RSA.
    4. Compute the hmac section using the generated hmackey on the sessionID and the shared key.
    4. Compute the ciphertext as the following: c = ENC(message) HMAC(sessionID | random key).

Message Decryption:

Decryption of messages involves the following steps:
    1. The ciphertext is broken up into the encrypted message and the HMAC.
    2. Decrpyt the secret key to get the pseudo-random key from the other party.
    3. Compute the hash along with the other party's sessionID.
    4. Verify that the hash is consisent with the received HMAC.
    5. Once verified, decrypt the message using RSA.

From the protocol above, two parties can establish a secure connection via a blend of SSH and Diffie-Hellman, and messages are encrypted using RSA with HMAC. This ensures the integrity of messages exchanged between communicating parties achieved through HMAC. Moreover, assuming the adversary doesn't have access to the files where the secret keys are stored, RSA encryption will make it hard for any adversary to find the correct plaintext, unlike the other party that has access to the secret key. We assume the adversary can only read through the source code and intercept messages in between. They might also keep track of intercepted messages' records, but that won't be useful in our protocol as we set up new Diffie-Hellman keys in every session along with new session IDs for the two parties ensuring forward secrecy. Another key note is that since our encryption only relies on RSA encryption, the length of the messages we can send is limited to a certain number of characters. This lack of longer messages can, however, provide better protection if an adversary is impersonating another party and tries to send some malicious message/code through the chat system. What happens is that the encryption would have failed in such a case, causing an error and thus not allowing the message to be sent and causing errors to allow the other party to acknowledge the connection has been compromised by removing both users from the connection. Hopeful the claims here are correct and securely provide the connection for the two parties and maximize protection against unwanted adversaries.